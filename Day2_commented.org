#+TITLE: Day 2 - Commented History from Class
#+AUTHOR: Cari Bogulski, Jason Gullifer
#+EMAIL: cari.bogulski@gmail.com, jason.gullifer@gmail.com
#+BABEL: :session *R*
#+STYLE: <link rel="stylesheet" type="text/css" href="stylesheets/stylesheet_org.css" />

* Working with data.frame
** Load our heights data and get the dimensions
   Let's load our heights data using =read.csv=. Then we should check the
   dimensions of it, and check each of the columns to see what type of
   data they contain. We might also want to see the =head= of our data;
   by default it shows 6 rows but we can customize how many rows we want
   to see.
   #+begin_src R :results output  :session *R* :exports both
     heights = read.csv("Cooked Data Sets/height_data.csv")
     dim(heights)
     str(heights)
     head(heights)
     head(heights,2)
   #+end_src





   Note: =dim()= only really works on multi-dimensional objects like
   data.frames. Otherwise NULL is returned.
#+begin_src R :results output  :session *R* :exports both
x = 7
dim(x)
y = 5
xy = c(x,y)
dim(xy)
#+end_src

   #+RESULTS:
   : NULL
   : NULL



** Referencing a data.frame by row and column number

#+begin_src R :results output  :session *R* :exports both
heights[1,3]
heights[7,1]
heights[4,2]
#+end_src

#+RESULTS:
: [1] F
: Levels: F M
: [1] Amelia
: Levels: Alvaro Amelia Bobby Caitlin Cari Fatemeh Jason Nathan Peiyao Tim
: [1] 62

#+begin_src R :results output   :session *R* :exports both
heights[1:10,2]
heights[1:10,1:3]
heights[1:10,c(1,3)]
#+end_src

#+RESULTS:
#+begin_example
 [1] 65 67 66 62 66 69 69 71 64 74
      Name Height Gender
1     Cari     65      F
2    Jason     67      M
3      Tim     66      M
4  Caitlin     62      F
5  Fatemeh     66      F
6    Bobby     69      M
7   Amelia     69      F
8   Alvaro     71      M
9   Peiyao     64      F
10  Nathan     74      M
      Name Gender
1     Cari      F
2    Jason      M
3      Tim      M
4  Caitlin      F
5  Fatemeh      F
6    Bobby      M
7   Amelia      F
8   Alvaro      M
9   Peiyao      F
10  Nathan      M
#+end_example

** Referencing a data.frame by column name
#+begin_src R  :results output  :session *R* :exports both
heights$Height
heights$Name
heights$Gender
#+end_src

#+RESULTS:
:  [1] 65 67 66 62 66 69 69 71 64 74
:  [1] Cari    Jason   Tim     Caitlin Fatemeh Bobby   Amelia  Alvaro  Peiyao  Nathan 
: Levels: Alvaro Amelia Bobby Caitlin Cari Fatemeh Jason Nathan Peiyao Tim
:  [1] F M M F F M F M F M
: Levels: F M


We can also ask for a specific element of a column name. Note: to do
this, you're now referencing a vector, so the ',' isn't necessary and
its inclusion would cause an error.
#+begin_src R :results output  :session *R* :exports both
heights$Height[5]
heights$Height[5,2]
#+end_src

#+RESULTS:
: [1] 66
: Error in heights$Height[5, 2] : incorrect number of dimensions

We might want to check the length of a column vector as well
#+begin_src R :results output  :session *R* :exports both
length(heights$Height)
#+end_src

#+RESULTS:
: [1] 10

** Adding new columns to data.frame 
Two basic ways. Through =$= notation and through =cbind()= (or column bind).

*** cbind() adding
#+begin_src R :results output  :session *R* :exports both
pets_height = c(12,9,8,0,25,24,7,0,0,0)
new_data = cbind(heights,pets_height)
new_data

joint_height = new_data$Height+new_data$pets_height
new_new_data = cbind(new_data,joint_height)
new_data
#+end_src

#+RESULTS:
#+begin_example
      Name Height Gender pets_height
1     Cari     65      F          12
2    Jason     67      M           9
3      Tim     66      M           8
4  Caitlin     62      F           0
5  Fatemeh     66      F          25
6    Bobby     69      M          24
7   Amelia     69      F           7
8   Alvaro     71      M           0
9   Peiyao     64      F           0
10  Nathan     74      M           0
      Name Height Gender pets_height
1     Cari     65      F          12
2    Jason     67      M           9
3      Tim     66      M           8
4  Caitlin     62      F           0
5  Fatemeh     66      F          25
6    Bobby     69      M          24
7   Amelia     69      F           7
8   Alvaro     71      M           0
9   Peiyao     64      F           0
10  Nathan     74      M           0
#+end_example

*** $ adding
#+begin_src R  :results output  :session *R* :exports both
pets_height = c(12,9,8,0,25,24,7,0,0,0)
pets_height
new_data = heights
new_data$pets_height <- pets_height
new_data
new_new_data <- new_data
new_new_data$joint_height <- new_new_data$Height + new_new_data$pets_height
new_new_data
#+end_src

#+RESULTS:
#+begin_example
 [1] 12  9  8  0 25 24  7  0  0  0
      Name Height Gender pets_height
1     Cari     65      F          12
2    Jason     67      M           9
3      Tim     66      M           8
4  Caitlin     62      F           0
5  Fatemeh     66      F          25
6    Bobby     69      M          24
7   Amelia     69      F           7
8   Alvaro     71      M           0
9   Peiyao     64      F           0
10  Nathan     74      M           0
      Name Height Gender pets_height joint_height
1     Cari     65      F          12           77
2    Jason     67      M           9           76
3      Tim     66      M           8           74
4  Caitlin     62      F           0           62
5  Fatemeh     66      F          25           91
6    Bobby     69      M          24           93
7   Amelia     69      F           7           76
8   Alvaro     71      M           0           71
9   Peiyao     64      F           0           64
10  Nathan     74      M           0           74
#+end_example

** Summarizing elements of a data.frame data
#+begin_src R :results output  :session *R* :exports both
all_heights_mean <- mean(heights$Height)
all_heights_mean
allheights_median <- median(heights$Height)
allheights_median
sums_heights <- sum(heights$Height)
sums_heights
#+end_src

#+RESULTS:
: [1] 67
: [1] 66
: [1] 673


If you try to run a function on an entire data.frame you will probably
get weird results. E.g., you can't get the mean of character/factor
vectors.

#+begin_src R :results output  :session *R* :exports both
mean(heights)
#+end_src

#+RESULTS:
: [1] NA
: Warning message:
: In mean.default(heights) : argument is not numeric or logical: returning NA

** Filtering or subsetting data.frame
#+begin_src R :results output  :session *R* :exports both
data = new_data[,1:4]
petowner_data = data[data$pets_height>0]
petowner_data = data[data$pets_height>0,]
petowner_data
#+end_src

#+RESULTS:
: Error in `[.data.frame`(data, data$pets_height > 0) : 
:   undefined columns selected
:      Name Height Gender pets_height
: 1    Cari     65      F          12
: 2   Jason     67      M           9
: 3     Tim     66      M           8
: 5 Fatemeh     66      F          25
: 6   Bobby     69      M          24
: 7  Amelia     69      F           7

#+begin_src R :results output  :session *R* :exports both
data$pets_height>0
#+end_src

#+RESULTS:
:  [1]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE

#+begin_src R :results output  :session *R* :exports both
tall_petowner_data = data[data$pets_height > 0 & data$Height > mean(data$Height) , ]
tall_petowner_data

short_petowner_data = data[data$pets_height > 0 & data$Height < mean(data$Height) , ]
short_petowner_data

tall_petowner_data = data[data$pets_height > 0 & data$Height >= mean(data$Height) , ]
tall_petowner_data

nonpetowners = data[data$pets_height==0,]
nonpetowners
#+end_src

#+RESULTS:
#+begin_example
    Name Height Gender pets_height
6  Bobby     69      M          24
7 Amelia     69      F           7
     Name Height Gender pets_height
1    Cari     65      F          12
2   Jason     67      M           9
3     Tim     66      M           8
5 Fatemeh     66      F          25
    Name Height Gender pets_height
6  Bobby     69      M          24
7 Amelia     69      F           7
      Name Height Gender pets_height
4  Caitlin     62      F           0
8   Alvaro     71      M           0
9   Peiyao     64      F           0
10  Nathan     74      M           0
#+end_example

Alternative way of making non-petowners data set.
#+begin_src R  :results output  :session *R* :exports both
nonpetowners = data[!(data$pets_height>0),]
nonpetowners
#+end_src

#+RESULTS:
:       Name Height Gender pets_height
: 4  Caitlin     62      F           0
: 8   Alvaro     71      M           0
: 9   Peiyao     64      F           0
: 10  Nathan     74      M           0


* Misc Stuff
** NA Values

Instead of having 0's in =pets_height= we could have used NA
values. NA values can be completely ignored by many summary functions
such as =mean= and =sum=. However, if you do not ignore them, R will
return your summary data as =NA= to make you aware that your data
included NA values.
#+begin_src R :results output  :session *R* :exports both
pets_height = c(12,9,8,NA,25,24,7,NA,NA,NA)
pets_height
mean(pets_height)
mean(pets_height,na.rm=TRUE)
#+end_src

#+RESULTS:
:  [1] 12  9  8 NA 25 24  7 NA NA NA
: [1] NA
: [1] 14

You can check for NAs in your data with the =is.na()= function
#+begin_src R :results output  :session *R* :exports both
is.na(pets_height)
#+end_src

#+RESULTS:
:  [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE

