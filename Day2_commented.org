#+TITLE: Day 2 - Commented History from Class
#+AUTHOR: Cari Bogulski, Jason Gullifer
#+EMAIL: cari.bogulski@gmail.com, jason.gullifer@gmail.com

#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes 

* Working with data.frame
** Load our heights data and get the dimensions
Let's load our heights data using =read.csv=. Then we should check the
dimensions of it, and check each of the columns to see what type of
data they contain. We might also want to see the =head= of our data;
by default it shows 6 rows but we can customize how many rows we want
to see.
#+begin_src R 
heights = read.csv("height_data.csv")
dim(heights)
str(heights)
head(heights)
head(heights,2)
#+end_src





Note: =dim()= only really works on multi-dimensional objects like
data.frames. Otherwise NULL is returned.
#+begin_src R 
x = 7
dim(x)
y = 5
xy = c(x,y)
dim(xy)
#+end_src



** Referencing a data.frame by row and column number

#+begin_src R 
heights[1,3]
heights[7,1]
heights[4,2]
#+end_src

#+begin_src R
heights[1:10,2]
heights[1:10,1:3]
heights[1:10,c(1,3)]
#+end_src

** Referencing a data.frame by column name
#+begin_src R
heights$Height
heights$Name
heights$Gender
#+end_src


We can also ask for a specific element of a column name. Note: to do
this, you're now referencing a vector, so the ',' isn't necessary and
its inclusion would cause an error.
#+begin_src R
height$Heights[5]
height$Heights[5,2]
#+end_src

We might want to check the length of a column vector as well
#+begin_src R
length(heights$Height)
#+end_src

** Adding new columns to data.frame 
Two basic ways. Through =$= notation and through =cbind()= (or column bind).

*** cbind() adding
#+begin_src R
pets_height = c(12,9,8,0,25,24,7,0,0,0)
new_data = cbind(heights,pets_height)
new_data

joint_height = new_data$Height+new_data$pets_height
new_new_data = cbind(new_data,joint_height)
new_data
#+end_src

*** $ adding
#+begin_src R
pets_height = c(12,9,8,0,25,24,7,0,0,0)
new_data = heights
new_data$pets_height <- pets_height
new_new_data <- new_data
new_new_data$joint_height <- new_new_data$Height + new_new_data$pets_height
#+end_src

** Summarizing elements of a data.frame data
#+begin_src R
all_heights_mean <- mean(heights$Height)
allheights_median <- median(heights$Height)
sums_heights <- sum(heights$Height)
#+end_src


If you try to run a function on an entire data.frame you will probably
get weird results. E.g., you can't get the mean of character/factor
vectors.

#+begin_src R
mean(heights)
#+end_src

** Filtering or subsetting data.frame
#+begin_src R
data = new_data[,1:4]
petowner_data = data[data$pets_height>0]
petowner_data = data[data$pets_height>0,]

#+end_src

#+begin_src R
data$pets_height>0
#+end_src

#+begin_src R
tall_petowner_data = data[data$pets_height > 0 & data$Height > mean(data$Height) , ]
tall_petowner_data

short_petowner_data = data[data$pets_height > 0 & data$Height < mean(data$Height) , ]
short_petowner_data

tall_petowner_data = data[data$pets_height > 0 & data$Height >= mean(data$Height) , ]
tall_petowner_data

nonpetowners = data[data$pets_height==0,]
nonpetowners
#+end_src

Alternative way of making non-petowners data set.
#+begin_src R
nonpetowners = data[!(data$pets_height>0),]
#+end_src


* Misc Stuff
** NA Values

Instead of having 0's in =pets_height= we could have used NA
values. NA values can be completely ignored by many summary functions
such as =mean= and =sum=. However, if you do not ignore them, R will
return your summary data as =NA= to make you aware that your data
included NA values.
#+begin_src R
pets_height = c(12,9,8,NA,25,24,7,NA,NA,NA)
mean(pets_height)
mean(pets_height,na.rm=TRUE)
#+end_src

You can check for NAs in your data with the =is.na()= function
#+begin_src R
is.na(pets_height)
#+end_src
